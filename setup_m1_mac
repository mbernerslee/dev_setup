#!/bin/zsh

RED="\033[1;31m"
GREEN="\033[1;32m"
NOCOLOR="\033[0m"
MAGENTA="\033[35m"

function echo_in_magenta() {
  echo "${MAGENTA}$1${NOCOLOR}"
}

function echo_in_green() {
  echo "${GREEN}$1${NOCOLOR}"
}

function echo_in_red() {
  echo "${RED}$1${NOCOLOR}"
}

function configure_zprofile {
  touch ~/.zshrc
  echo_in_magenta "Configuring ~/.zshrc..."

  zsh_additions="source ~/src/dev_setup/zsh_additions"
  if [ `grep -c "$zsh_additions" ~/.zshrc` -eq 0 ]; then
    echo "$zsh_additions" >> ~/.zshrc
  fi

  echo_in_green "configured ~/.zprofile"
}

function install_brew() {
  echo_in_magenta "installing brew..."
  which brew > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo_in_green "brew already installed"
  else
    echo | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" > /dev/null
    additions='eval "$(/opt/homebrew/bin/brew shellenv)"'
    if [ `grep -c "$additions" ~/.zprofile` -eq 0 ]; then
      echo "$additions" >> ~/.zprofile
    fi
    eval "$(/opt/homebrew/bin/brew shellenv)"
    source ~/.zprofile
    echo_in_green "brew installed"
  fi
}

function generate_ssh_keys() {
  echo_in_magenta "Running generate_ssh_keys..."
  if [ -f ~/.ssh/id_rsa.pub ]; then
    echo_in_green "already have SSH keys"
  else
    echo_in_magenta "Generating SSH keys..."
    ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ''
  fi
}

function configure_tmux() {
  echo_in_magenta "Configuring tmux..."
  if [ -d ~/src/dev_setup ]; then
    ln -sf ~/src/dev_setup/.tmux.conf ~/.tmux.conf
    echo_in_green "tmux configured"
  else
    echo_in_red "~/src/dev_setup does not exist, so bailing"
    exit 1
  fi
}

function configure_vim() {
  touch ~/.vimrc
  pushd .
  mkdir -p ~/.vim/colors
  cd ~/.vim/colors

  brew install wget -q

  if [ ! -f solarized.vim ]; then
    wget https://raw.githubusercontent.com/altercation/vim-colors-solarized/master/colors/solarized.vim
  fi
  if [ ! -f ~/.vim/autoload/plug.vim ]; then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  fi
  popd
  vim +'PlugInstall --sync' +qa

  brew install ack -q

  if [ -d ~/src/dev_setup ]; then
    ln -sf ~/src/dev_setup/.vimrc ~/.vimrc
  else
    echo_in_red "~/src/dev_setup does not exist, so bailing"
    exit 1
  fi
}

function install_neovim() {
  which nvim > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo_in_green "neovim already installed"
    nvim --version
  else
    echo_in_magenta "installing neovim..."
    curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz
    tar xzf nvim-macos-arm64.tar.gz
    mv ./nvim-macos-arm64/ ~/
    rm -rf nvim-macos-arm64.tar.gz
    sudo ln -sf ~/nvim-macos-arm64/bin/nvim /usr/local/bin/nvim
  fi
}

function configure_neovim() {
  if [ -d ~/src/dev_setup ]; then
    echo_in_magenta "Checking ~/src/dev_setup/nvim ~/.config/nvim symlink..."
    dest=$(realpath ~/src/dev_setup/nvim)
    link=$(readlink ~/.config/nvim 2>&1)
    if [ $? -eq 0 ]; then
      if [ "$link" = "$dest" ]; then
        echo_in_green "already in place!"
      else
        echo_in_red "broken!"
        exit 1
      fi
    else
      mkdir -p ~/.config/nvim
      ln -sf ~/src/dev_setup/nvim ~/.config/nvim
      if [ $? -eq 0 ]; then
        echo_in_green "created successfully!"
      else
        echo_in_red "creation attempt failed!"
        exit 1
      fi
    fi
  else
    echo_in_red "~/src/dev_setup does not exist, so bailing"
    exit 1
  fi
}

function install_asdf() {
  brew install coreutils curl git -q
  brew install asdf -q
}

function install_asdf_plugins() {
  for plugin in elixir erlang nodejs ruby ; asdf plugin add $plugin
}

function install_erlang_25() {
  brew install wxwidgets
  brew install openjdk

  path_addition='export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"'
  if [ `grep -c "$path_addition" ~/.zshrc` -eq 0 ]; then
    echo "$path_addition" >> ~/.zshrc
    source ~/.zshrc
  fi

  brew install fop

  export CC=clang
  export CPP="clang -E"
  export EGREP=egrep
  export KERL_BUILD_DOCS=yes
  export KERL_INSTALL_MANPAGES=yes
  export KERL_USE_AUTOCONF=0

  export KERL_CONFIGURE_OPTIONS="--disable-silent-rules --enable-dynamic-ssl-lib --enable-kernel-poll --without-javac --without-odbc --with-ssl=$(brew --prefix openssl) --disable-jit"

  asdf install erlang 25.1.2
}

function install_psql_client() {
  brew install libpq
  brew link --force libpq
}

install_brew
generate_ssh_keys

brew install git -q
#brew install google-chrome -q
brew install --cask font-jetbrains-mono-nerd-font -q
brew install --cask iterm2 -q

install_neovim
configure_neovim

brew install tmux -q
configure_tmux

install_asdf
install_asdf_plugins

install_erlang_25
install_psql_client

#brew install slack -q
#brew install --cask zoom -q
#brew install --cask visual-studio-code -q

#brew install zoxide -q
brew install rg -q

configure_zprofile
